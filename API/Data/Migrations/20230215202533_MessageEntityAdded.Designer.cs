// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230215202533_MessageEntityAdded")]
    partial class MessageEntityAdded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.0");

            modelBuilder.Entity("API.entities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("city")
                        .HasColumnType("TEXT");

                    b.Property<string>("country")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("created")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("dateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("gender")
                        .HasColumnType("TEXT");

                    b.Property<string>("interests")
                        .HasColumnType("TEXT");

                    b.Property<string>("introduction")
                        .HasColumnType("TEXT");

                    b.Property<string>("knownAs")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("lastActivity")
                        .HasColumnType("TEXT");

                    b.Property<string>("lookingFor")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("passwordHash")
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("passwordSalt")
                        .HasColumnType("BLOB");

                    b.Property<string>("userName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("API.entities.Message", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("content")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("dateRead")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("messageSent")
                        .HasColumnType("TEXT");

                    b.Property<bool>("recipientDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("recipientId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("recipientUserName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("senderDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("senderId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("senderUserName")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("recipientId");

                    b.HasIndex("senderId");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("API.entities.Photo", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("appUserId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("isMan")
                        .HasColumnType("INTEGER");

                    b.Property<string>("publicId")
                        .HasColumnType("TEXT");

                    b.Property<string>("url")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("appUserId");

                    b.ToTable("Photo");
                });

            modelBuilder.Entity("API.entities.UserLike", b =>
                {
                    b.Property<int>("sourceUserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("likedUserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("sourceUserId", "likedUserId");

                    b.HasIndex("likedUserId");

                    b.ToTable("likes");
                });

            modelBuilder.Entity("API.entities.Message", b =>
                {
                    b.HasOne("API.entities.AppUser", "recipient")
                        .WithMany("messageReceived")
                        .HasForeignKey("recipientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API.entities.AppUser", "sender")
                        .WithMany("messageSent")
                        .HasForeignKey("senderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("recipient");

                    b.Navigation("sender");
                });

            modelBuilder.Entity("API.entities.Photo", b =>
                {
                    b.HasOne("API.entities.AppUser", "AppUser")
                        .WithMany("photos")
                        .HasForeignKey("appUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("API.entities.UserLike", b =>
                {
                    b.HasOne("API.entities.AppUser", "likedUser")
                        .WithMany("likedByUsers")
                        .HasForeignKey("likedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.entities.AppUser", "sourceUser")
                        .WithMany("likedUsers")
                        .HasForeignKey("sourceUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("likedUser");

                    b.Navigation("sourceUser");
                });

            modelBuilder.Entity("API.entities.AppUser", b =>
                {
                    b.Navigation("likedByUsers");

                    b.Navigation("likedUsers");

                    b.Navigation("messageReceived");

                    b.Navigation("messageSent");

                    b.Navigation("photos");
                });
#pragma warning restore 612, 618
        }
    }
}
